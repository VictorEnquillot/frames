(** {3 Property_operand_fence_container_v} *)

(** {6 Documenting_for_container} *)

let documentation () = 
  [
   "Current : FCOO:Property_operand_fence_container_v";
   "Needs : FCOO:Property_operand_fence_external_tag_v";
   "Needed-by: ";
   "Definition : a Building is the same Datastructure as a Container but filled with Builders"; 
   "Definition : a Containee is a Builder expressed in the lowest subtype compatible with the Datastructure of the Container";
   "Definition : a Container is the Datastructure of the Containee of an Entity";
   "Definition : a Containee is an element of the Datastructure of the Container of an Entity";
   "Definition : a Builder (for an Entity of a Domain) is a son of its B-Tree i.e. Coerced Up";
   "Definition : a Builder of a fence Container is its own Tag Coerced Up";
   "Definition : the Builder list of a fence Container is empty";
   "Definition : a Building is the same Datastructure as a Container but filled with Builders"; 
   "Definition : a Containee is a Builder expressed in the lowest subtype compatible with the Datastructure of the Container";
   "Definition : the Containee Tag of a fence Container is its own Tag";
   "Definition : a fence Container contains an Uno of its Tag";
   "Definition : a non-fence Bud Container is a Datastructure of Containee Tag";
   "Definition : a Bud is a type with only one constructor of string";
   "Definition : a Trunc is a type with only constructors of constructor";
   "What-is-it : Up_coercion of Container type as Symbol type up_coercion";
   "What-is-it : it is a Uno of Tag";
   "Author : FranÃ§ois Colonna 21 mai 2017 at 16:09:03+01:00";
 ]
;;

let nam_mod = Management_v.current_module_name (documentation ());;

(** {6 Coercing Up Tag} *)

let coerce_up_tag tag_pof =
  Tag_v.map_entity 
    Property_symbol_v.property_symbol_of_property_operand_fence_symbol
    tag_pof
;;

(** {6 Coercing Down Tag} *)

let coerce_down_tag tag_pro =
  Tag_v.map_entity 
    Property_symbol_v.property_operand_fence_symbol_off_property_symbol
    tag_pro
;;

(** {6 Builder Tag} *)

let builder_tag_of_tag tag_pof =
  coerce_up_tag tag_pof
;;

(** {6 Builder Tag list is empty} *)

let builder_tag_list_of_tag tag_pof =
  let tag_pro = coerce_up_tag tag_pof in
    [tag_pro]
;;

(** {6 Builder Tag Datastructures} *)

let builder_tag_uno_of_tag tag_pof =
  let tag_bui_l = builder_tag_list_of_tag tag_pof in
  Uno_v.uno_of_list tag_bui_l
;;

(** {6 Builder Tag Tuple} *)

let builder_tag_tuple_of_tag tag_pof =
  let tag_bui_u = builder_tag_uno_of_tag tag_pof in
  Tuple_v.tuple_of_uno tag_bui_u
;;

(** {6 Building as Builder Tag uno} *)

let building_of_tag tag_pof =
  builder_tag_uno_of_tag tag_pof
;;

(** {6 Coercing Down Containee} *)

let containee_tag_off_builder_tag tag_pro =
  coerce_down_tag tag_pro 
;;

(** {6 Container_of_tag : Pattern Matching} *)

let container_of_tag tag_pof =
  let (sym_pof, soi_pof) = tag_pof in
  match sym_pof with
  | Property_operand_fence_symbol_t.Property_operand_fence_external_symbol sym_pfe ->
      let tag_pfe = Tag_v.make sym_pfe soi_pof in
      let con_pfe = Property_operand_fence_external_container_v.container_of_tag tag_pfe in
      Property_operand_fence_container_t.Property_operand_fence_external_container con_pfe
;;

(** {6 Containee Tag Datastructure} *)

let containee_tag_uno_of_tag tag_pof =
  container_of_tag tag_pof
;;

(** {6 Containee Tag Tuple} *)

let containee_tag_tuple_of_tag tag_pof =
  let tag_cne_u = containee_tag_uno_of_tag tag_pof in
  Tuple_v.tuple_of_uno tag_cne_u
;;

(** {6 Fence *)

let fence_as_list_of_tag tag_pof =
  let tag_pro = coerce_up_tag tag_pof in
  [tag_pro]
;;

let fence_as_uno_of_tag tag_pof =
  let fen_pof = fence_as_list_of_tag tag_pof in
  Uno_v.uno_of_list fen_pof
;;

let fence_as_tuple_of_tag tag_pof =
  let fen_l = fence_as_list_of_tag tag_pof in
  Tuple_v.tuple_of_list fen_l
;;

let fence_as_tuple_list_of_tag tag_pof =
  let fen_l = fence_as_list_of_tag tag_pof in
  Tuple_list_v.make fen_l
;;

(** {6 Naming_for_container} *)

let name = function
  | Property_operand_fence_container_t.Property_operand_fence_external_container con_pfe ->
      (Property_operand_fence_external_container_v.name con_pfe)
;;

let string_off = function
  | Property_operand_fence_container_t.Property_operand_fence_external_container con_pfe ->
      (Property_operand_fence_external_container_v.string_off con_pfe)
;;

let longname = function
  | Property_operand_fence_container_t.Property_operand_fence_external_container con_pfe ->
      (Property_operand_fence_external_container_v.longname con_pfe)
;;

let fullname = function
  | Property_operand_fence_container_t.Property_operand_fence_external_container con_pfe ->
      (Property_operand_fence_external_container_v.fullname con_pfe)
;;


(* generated by ./do_container_as_uno_fence_trunc_1sibling_0containee_v.sh property_operand_fence pof property_operand_fence_external pfe *)
(* using template_container_as_uno_fence_trunc_1sibling_0containee_v.ml *)
(* Done on dimanche 21 mai 2017, 10:59:58 (UTC+0200) *)
