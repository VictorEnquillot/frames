Program Generator. 
File : $FRM/generatorset/generatorset_tags/README

The files of this directory implement the Tags of the Caml Code World

The entities of the Caml Code World are:

* Entity 
* Camltype 
* Category
* Camlline
* Camlfilecontent
* Camlfileusage
* Constructor
* Item
* Paragraph



* Entity 
    an entity is any concept that is implemented as Caml Modules 
    e.g. "Atom" is implemented as Modules 
              Atom_symbol_t Atom_symbol_v
              Atom_tag_t Atom_tag_v
	      Atom_path_t Atom_path_v
	      Atom_formula_t Atom_formula_v
              Atom_value_t Atom_value_v

    there are several kinds of Entities :
      Proper   
        which have several Camltypes (and associated Camlfiles)
      Fictive 
        which are only Constructors (no module file)
      External
        which are defined in an other Domain (Directory, e.g. Ordinal)
  
    there are several kinds of Entities :
      Proper   
        which have a Camltype (and module files)
      Fictive 
        which are only Constructors (no module file)
      External
        which are defined in an other Domain (Directory, e.g. Ordinal)
    
* Camltype 
    It is defined by the "type" keyword in Caml.

    they are divided here in two kinds :

    Essential   
      which never involve tuples and list

    Container 
      which involve tuples and list

  and two other kinds :

    Monoconstructor 
      One line is enough to define it.  

      Essential :
           type x = A of a
           type y = U

      Container :
           type h = (a, b) couple 
           type l = a list
           type t = a tree

    Polyconstructor   
       Several lines are needed to define it.
  
      Essential :
           type z =
               | A of a
               | B of b
               ...
               | U

      Container :
           type i = 
	     | C of (a, b) couple 
             | D of d singlet

    x, y and z are Camltypes.

  and two other kinds :

    Constrained
    Unconstrained

** Summary of Camltype kinds :

  Status :
    Constrained | Unconstrained 
    is defined by the User in the .set file

  Arity :
    Monoconstructor | Polyconstructor
    is defined in the .set file by counting the constructors.

  Nature :
    Essential | Container 
    is implied by the Category
   
* Constructor
    it is what follows a "|" (or and "=" when camltype is monoconstructor) in 
    the definition of a Camltype.
 
  Arity :
    Nullary | Unary | N-ary

  Nature :
    Descriptive | Datastructure

  Examples :
    Descriptive
      Nullary   
         | N

      Unary 
         | U of u

      No N-ary

    Datastructure
      No Nullary

      N-ary
         | M of (a, b) datastructure

      data structure is : 
         couple, triplet, ..., list, tree, etc...
      it is always a parametrizable type made combining tuples and lists
      and therefore N-Ary 

    U is a Unary Constructor
    N is a Nullary Constructor
    M is a N-Ary Constructor
    a, b are Camltypes

* Category (declension, inflexion, flection)

    Depending of the kind of information provided an entity is declined
    in several aspects which each need to be implemented with a
    well defined Camltypes. 

    We named these aspects "categories". 
    An Entity is declined in to Main Categories : Symbol and Formula

    The Symbol allows to parametrize the (provide) function that encapsulates
    the calculation of the function which builds the Value of an Entity from
    the Values of its Sons.
    The information it contains tells what kind of Entity is to be provided, it
    is independant of the Value of the Entity, which is yet not known.
    It could not be a Container, it is a Descriptive Camltype.

    The Formula contains - and is therefore necessarily a Container Camltype -
    the Symbols of the Sons of an Entity.  
    Applying the specific provide function each element (Son Symbol) of the 
    Formula will return a Container containing Son Values instead of Son Symbols.
    This is the Value Category of the Entity.
    If the Container used to defined ths Formula is uniquely indexed (Uindex)
    it is convenient to define the Category Tag which couples the Symbol and 
    its Uindex in the Formula and then the Category Path as the list of Tags 
    containing all Tags of the ancestors of an Entity.

    From these definitions we see that the information (Tags) contained in a
    Path flows from the Top (Target of a Program) to the Entity under 
    calculation.
    While the information contained in a Value flows through the Formulas 
    recursively from the Input Data of the Program up to the Value of the Entity 
    under calculation.

    This implies that Symbols, Tags and Paths must be implemented into files
    compiled independently from Formulas and Values.

    All Categories are listed below :
     
    Symbol   it defines the fact that a given Entity exists
              e.g. Atom_symbol 
    Tag      it couples a Symbol and a Uindex
    Path     it is a list of Tags 
    Formula  it is a container containing the Tags of the Son entities
    Value    it is the same container as the Formula 
              containing the values of the Son entities
    Property it an Entity defined from the Value of an Entity
    Provider it provides a Property from the Path of an Entity

     which represents the different concept of the IRP.

** Symbol 
    it is implemented as a Essential Camltype, it can use Mono 
    or Polyconstructors.

    For entities E, F and G
    type e_symbol = U
    type f_symbol = A of a
    type g_symbol = 
       | A of a
       | U

** Tag
     it is implemented as a couple between a Tag and an Index.

* Camlfile 
     it is a disk file where the Caml code is stored.
     For one couple (Entity, Category) e.g. (atom symbol)
     there is 2 or 3 Camlfile, depending of the kind of Camltype 
     this couple have.

** Camlfile Usage
     Implementation | Interface
     
     Three files for Unconstrained Camltypes :
         unconstrained_type_implementation   (suffix _t.ml)    
         unconstrained_value_implementation  (suffix _v.ml) 
         unconstrained_value_interface       (suffix _v.mli) 

     Two files for Constrained Camltypes (private) :
         constraint_typevalue_implementation (suffix _p.ml)
         constraint_typevalue_interface      (suffix _p.mli) 
 
     There is a Camlfile for one Ecc triplet.

This triplet is named "entitycategorycodefile" or "ecc" for short.

A Camlfile name is typically built from "ecc" :
  e.g. "atom_symbol_v.ml" 
       "atom_tag_v.ml" 
       "atom_path_v.ml" 
       "atom_formula_v.ml" 
       "atom_value_v.ml"

** Module
     it is what is meant in Caml by the keyword "module M = ".
     It is only possible to define such a module for Implementation Camlfile.

     A module is defined by (Entity, Category, Typestatus)   


     There are two cases :
     1. Constrained Camltypes correspond to one Module 
     2. Unconstrained Camltypes correspond to two Modules (e_t.ml and (e_v.ml, e_v.mli))
     
* Camlfile

* Item

* Paragraph
* Camlline

