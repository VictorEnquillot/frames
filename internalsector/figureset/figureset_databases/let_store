let dump () = Register_v.dump name_of_key name_of_value register;;

(** {6 Storing.} *)

let error_message_already_stored_value_of_key_of_value key val_ =
  let nam_fun = "already_stored_message" in
  
  let val__old = retrieve key in
  if val_ <> val__old
  then 
    Error_messages_v.print_fatal_error nam_mod nam_fun
      (Format.sprintf "for key >%s<@.    already stored value :@.   %s@.    equal new one :"
         (name_of_key key) 
         (name_of_value val__old)
      )
      (Format.sprintf "for new one :@.   %s@.Register stores:@.  %s" 
         (name_of_value val_)
         (dump ())
      )
      "Check or re-run if it is a test"
  else 
    Error_messages_v.print_warning nam_mod nam_fun
      (Format.sprintf "for key >%s<@.    the same value has already been stored:@.   %s@."
         (name_of_key key) 
         (name_of_value val__old)
      )
;;

let store key val_ =
  try 
    if Parameters_figureset_general_provider_v.provide "trace-store" = "true"
    then Register_v.store_verbose register key val_ nam_mod name_of_key name_of_value
    else Register_v.store register key val_
  with Failure ("Already_stored:Register_v.ml:store") ->
    error_message_already_stored_value_of_key_of_value key val_
;;

let store_force key val_ =
  Register_v.store_force register key val_
;;

let is_stored key =
  Register_v.is_stored register key
;;


