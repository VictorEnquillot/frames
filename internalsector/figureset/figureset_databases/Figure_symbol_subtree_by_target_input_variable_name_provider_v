(** {3 Target_figure_symbol_subtree_by_input_variable_name_provider_v} *)

(** {6 Documenting} *)

let documentation () = 
  [
   "Current : DFIG:Target_figure_symbol_subtree_by_input_variable_name_provider_v";
   "Needs : DFIG:External_figure_symbol_subtree_by_input_variable_name_provider_v";
   "Needs : PROINP:Figure_string_off_by_input_variable_name_provider_v";
   "Needs : PROINP:External_input_variable_name_by_input_variable_name_provider_v";
   "Needs : PROINP:Make_argument_by_external_input_variable_name_provider_v";
   "Needed-by :"; 
   "What-is-it : the subtree of a Target Figure_symbol defined by its Input_variable_name of Input-file";
   "How-is-it-done : by replacing the Figure_name by the Target name";
  ]
;;

(** {6 Building} *)

let build nam_ivn_tar =
  let kin_ivn_tar = Input_variable_kind_by_input_variable_name_provider_v.provide nam_ivn_tar in
  if not (Input_symbol_v.is_input_keyword_target kin_ivn_tar)
  then
    begin
      let nam_mod = Management_v.current_module_name (documentation ()) in
      Error_messages_v.print_fatal_error nam_mod "build"
	(Format.sprintf "Input_variable %s a Target" nam_ivn_tar)
	(Format.sprintf "it is a %s" (Input_symbol_v.fullname kin_ivn_tar))
	"Check"
    end
  else
    begin
      let nam_mod = Management_v.current_module_name (documentation ()) in
      Utilities_v.not_yet_implemented nam_mod "build"
      (* let nam_ivn_tar = External_input_variable_name_by_input_variable_name_provider_v.provide nam_ivn_tar in *)
      (* let sym_fig_st = External_figure_symbol_subtree_by_input_variable_name_provider_v.provide nam_ivn_tar in *)
      
      (* let sof_fig = Figure_string_off_by_input_variable_name_provider_v.provide nam_ivn_tar in *)
      (* let mak_arg = Make_argument_by_target_input_variable_name_provider_v.provide nam_ivn_tar in *)
      (* let sym_fig = Figure_symbol_v.make mak_arg sof_fig in *)
      (* let sym_fig_tar = Figure_symbol_v.make mak_arg nam_ivn_tar in *)
      
      (* Tree_v.replace_of_node_predicate_of_value_of_tree  *)
      (* 	(fun n -> n = sym_fig)  *)
      (* 	sym_fig_tar *)
      (* 	sym_fig_st *)
	
    end
;;

let build_n_store nam_ivn_tar =
  build nam_ivn_tar 
;;

let provide_without_trace nam_ivn_tar =
  build nam_ivn_tar
;;

let provide_with_trace nam_ivn_tar =
  let nam_mod = Management_v.current_module_name (documentation ()) in
  Management_v.entering_of_current_module_name nam_mod;

  let result = provide_without_trace nam_ivn_tar in

  Management_v.exiting_of_current_module_name nam_mod;
  result
;;

let provide nam_ivn_tar =
  if Parameters_figureset_general_provider_v.provide "trace-provide" = "true"
  then provide_with_trace nam_ivn_tar
  else provide_without_trace nam_ivn_tar
;;


