Register_v.delete Common_symbol_by_sole_index_register_v.register;;
Register_v.delete Figure_symbol_by_sole_index_register_v.register;;
Register_v.delete Input_filename_by_domain_tag_register_v.register;;
Register_v.delete Model_information_list_by_target_tag_register_v.register;;
Register_v.delete Figure_tag_by_model_figureset_tag_register_v.register;;

(* Preparing Common_symbol_by_sole_index_register_v *)

let nam_dom = "figure";;
let tag_dom = Domain_tag_v.make_of_domain_name_of_sole_index_up nam_dom [];;

let nam_fil = Filename_p.filename "/keep/sources/ocaml_top/setup/frames/figureset/functional_tests/figure.inp";;
Input_filename_by_domain_tag_register_v.store tag_dom nam_fil;;

let tag_tar_l = Target_tag_list_by_domain_tag_provider_v.provide tag_dom;;

test_number 1 (
tag_tar_l 
(* : Target_symbol_t.target_symbol Tag_t.tag list *)
=
  [(Target_symbol_t.Target_figureset_symbol
     (Target_figureset_symbol_t.Target_figureset_symbol_constructor
       "triangle_perimeter_ratio"),
    [1; 3]);
   (Target_symbol_t.Target_figureset_symbol
     (Target_figureset_symbol_t.Target_figureset_symbol_constructor
       "triangle_scalene_right_surface"),
    [2; 3]);
   (Target_symbol_t.Target_figureset_symbol
     (Target_figureset_symbol_t.Target_figureset_symbol_constructor
       "triangle_equilateral_perimeter"),
    [3; 3])]
);;

(* 1 Target "triangle_perimeter_ratio" *)

let tag_tar = List.nth tag_tar_l 0;;
let inf_mod_l = Model_information_list_by_target_tag_provider_v.provide tag_tar;;

test_number 2 (
inf_mod_l
(* : Model_information_t.model_information list *)
=
  [Model_information_t.Model_figureset_information
    {Model_figureset_information_t.model_name = "triangle_equilateral";
     Model_figureset_information_t.model_title = "a triangle equilateral";
     Model_figureset_information_t.coordinate_what = "cartesian";
     Model_figureset_information_t.coordinate_units = "meter";
     Model_figureset_information_t.database_name = "db1";
     Model_figureset_information_t.entity_what =
      "triangle_isoceles_equilateral";
     Model_figureset_information_t.entity_name = "T"};
   Model_information_t.Model_figureset_information
    {Model_figureset_information_t.model_name = "triangle_scalene_right";
     Model_figureset_information_t.model_title = "a triangle scalene right";
     Model_figureset_information_t.coordinate_what = "cartesian";
     Model_figureset_information_t.coordinate_units = "meter";
     Model_figureset_information_t.database_name = "db1";
     Model_figureset_information_t.entity_what = "triangle_scalene_right";
     Model_figureset_information_t.entity_name = "u"}]
);;

let tag_mod_l = Model_tag_list_by_target_tag_provider_v.provide tag_tar;;

test_number 3 (
tag_mod_l 
(* : Model_symbol_t.model_symbol Tag_t.tag list *)
=
  [(Model_symbol_t.Model_figureset_symbol
     (Model_figureset_symbol_t.Model_figureset_symbol_constructor
       "triangle_equilateral"),
    [1; 1; 3]);
   (Model_symbol_t.Model_figureset_symbol
     (Model_figureset_symbol_t.Model_figureset_symbol_constructor
       "triangle_scalene_right"),
    [2; 1; 3])]
);;

let dump_common_1 = Common_symbol_by_sole_index_register_v.dump ();;

(* 1 Model_tag "triangle_equilateral" *)

let tag_mod = List.nth tag_mod_l 0;;
let tag_mfi = Tag_v.map_entity Model_symbol_v.model_figureset_symbol_off_model_symbol tag_mod;;

(* 1 Figure_tag "triangle_equilateral" *)

let tag_fig = Figure_tag_from_model_figureset_tag_translator_v.translate tag_mfi;;

test_number 4 (
tag_fig 
(* : Figure_symbol_t.figure_symbol * int list *)
=
  (Figure_symbol_t.Triangle_symbol
    (Triangle_symbol_t.Triangle_isoceles_symbol
      (Triangle_isoceles_symbol_t.Triangle_isoceles_equilateral "T")),
   [1; 1; 3])
);;

let tag_tri = Tag_v.map_entity Figure_symbol_v.triangle_symbol_off_figure_symbol tag_fig;;

test_number 5 (
tag_tri 
(* : Triangle_symbol_t.triangle_symbol Tag_t.tag *)
=
  (Triangle_symbol_t.Triangle_isoceles_symbol
    (Triangle_isoceles_symbol_t.Triangle_isoceles_equilateral "T"),
   [1; 1; 3])
);;

let tag_poi_l = Point_tag_list_by_triangle_tag_provider_v.provide tag_tri;;

test_number 6 (
tag_poi_l
=
  [(Point_symbol_t.Point_constructor "A", [1; 1; 1; 3]);
   (Point_symbol_t.Point_constructor "B", [2; 1; 1; 3]);
   (Point_symbol_t.Point_constructor "C", [3; 1; 1; 3])]
);;

(* 2 Point B *)

let nam_poi = "point_constructor";;
let sto_poi = "B";;
let sym_poi = Point_symbol_v.make nam_poi sto_poi;;
let tag_poi = Doublet_list_v.find_if_left (fun s -> s = sym_poi) tag_poi_l;;

test_number 7 (
tag_poi 
(* : Point_symbol_t.point_symbol Tag_t.tag *)
=
  (Point_symbol_t.Point_constructor "B", [2; 1; 1; 3])
);;
