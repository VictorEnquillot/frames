val filter_if_left : ('a -> bool) -> 'a Trio_t.trio list -> 'a Trio_t.trio list;;
val filter_if_middle : ('a -> bool) -> 'a Trio_t.trio list -> 'a Trio_t.trio list;;
val filter_if_right : ('a -> bool) -> 'a Trio_t.trio list -> 'a Trio_t.trio list;;
val find_if_left : ('a -> bool) -> 'a Trio_t.trio list -> 'a Trio_t.trio;;
val find_if_right : ('a -> bool) -> 'a Trio_t.trio list -> 'a Trio_t.trio;;
val has_left : 'a -> 'a Trio_t.trio list -> bool;;
val has_right : 'a -> 'a Trio_t.trio list -> bool;;
val iter : ('a -> unit) -> 'a Trio_t.trio list -> unit;;
val left_duo_list_off_trio_list : 'a Trio_t.trio list -> 'a Duo_t.duo list;;
val left_list_off_trio_list : 'a Trio_t.trio list -> 'a list;;
val left_of_right_off_trio_list : 'a -> 'a Trio_t.trio list -> 'a;;
val list_of_trio_list : 'a Trio_t.trio list -> 'a list;;
val list_trio_of_list : 'a list -> 'a list Trio_t.trio;;
val make : 'a list -> 'a list -> 'a list -> 'a Trio_t.trio list;;
val make_of_list_of_duo_list : 'a list -> ('a * 'a) list -> 'a Trio_t.trio list;;
val make_of_duo_list_of_list : ('a * 'a) list -> 'a list -> 'a Trio_t.trio list;;
val map : ('a -> 'b) -> 'a Trio_t.trio list -> 'b Trio_t.trio list;;
val middle_list_off_trio_list : 'a Trio_t.trio list -> 'a list;;
val name : ('a -> string) -> 'a Trio_t.trio list -> string;;
val name_in_column : ('a -> string) -> 'a Trio_t.trio list -> string;;
val name_with_separator :  ('a -> string) -> string -> 'a Trio_t.trio list -> string;;
val nth_left_of_int_off_trio_list : int -> ('a * 'b) list -> 'a;;
val nth_right_of_int_off_trio_list : int -> ('a * 'b) list -> 'b;;
val nth_trio_of_int_off_trio_list : int -> 'a list -> 'a;;
val prepend : 'a -> 'a -> 'a -> 'a Trio_t.trio list -> 'a Trio_t.trio list;;
val read : 'a -> 'b;;
val right_duo_list_off_trio_list : 'a Trio_t.trio list -> 'a Duo_t.duo list;;
val right_list_off_trio_list : 'a Trio_t.trio list -> 'a list;;
val right_of_left_off_trio_list : 'a -> 'a Trio_t.trio list -> 'a;;
val top : 'a list -> 'a;;
val trio_count_of_trio_list : 'a list -> int;;
val trio_list_of_list : 'a list -> 'a Trio_t.trio list;;
val trio_of_left_off_trio_list : 'a -> 'a Trio_t.trio list -> 'a Trio_t.trio;;
val trio_of_right_off_trio_list : 'a -> 'a Trio_t.trio list -> 'a Trio_t.trio;;
val trio_off_trio_list : 'a list -> 'a;;
val trio_right_list_include_of_left_off_trio_list :  'a -> 'a Trio_t.trio list -> 'a Trio_t.trio list;;
val uptrio_list_of_left_off_trio_list :  'a -> 'a Trio_t.trio list -> 'a Trio_t.trio list;;
val uptrio_list_off_trio_list : 'a list -> 'a list;;
